apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'h2'
apply plugin: 'liquibase'
apply from: 'jmeter.gradle'

buildscript {
	repositories {
        add(new org.apache.ivy.plugins.resolver.URLResolver()) {
            name = 'GitHub'
            addArtifactPattern 'http://cloud.github.com/downloads/[organisation]/[module]/[module]-[revision].[ext]'
        }
        mavenCentral()
    }
	dependencies {
        classpath 'jamescarr:h2-gradle-plugin:0.8.2'
        classpath 'com.augusttechgroup:gradle-liquibase-plugin:0.6.1'
		classpath "com.h2database:h2:$h2Version"
	}
}

repositories {
  mavenCentral()
}

configurations {
	h2
	seleniumCompile {
        extendsFrom testCompile
	}
	all*.exclude group: 'org.apache.geronimo.specs', module: 'geronimo-servlet_2.5_spec'
}

sourceSets {
    selenium
}

dependencies {
  compile "commons-lang:commons-lang:2.6",
  
          "org.apache.shiro:shiro-core:${shiroVersion}",
          "org.apache.shiro:shiro-web:${shiroVersion}",
          
          "org.slf4j:slf4j-api:${slfVersion}",
          "org.slf4j:slf4j-log4j12:${slfVersion}",
          "org.slf4j:jcl-over-slf4j:${slfVersion}",
          'log4j:log4j:1.2.17',          
          
          'org.codehaus.jackson:jackson-mapper-asl:1.8.3',
          'jstl:jstl:1.2',
          'org.hibernate:hibernate-core:4.1.9.Final',
          'org.apache.httpcomponents:httpclient:4.2.2',
          'org.apache.httpcomponents:httpmime:4.2.2'
  compile("org.apache.cxf:cxf-rt-frontend-jaxrs:${cxfVersion}")  { exclude group: "org.springframework" }
  compile("org.apache.cxf:cxf-rt-core:${cxfVersion}")  { exclude group: "org.springframework" }
  compile("org.apache.cxf:cxf-rt-rs-extension-providers:${cxfVersion}")  { exclude group: "org.springframework" }
  compile("org.apache.cxf:cxf-rt-transports-http-jetty:${cxfVersion}") {exclude group: 'org.springframework' }
  compile('org.codehaus.jettison:jettison:1.3.2') { exclude group: 'stax', module: 'stax-api' }
  seleniumCompile('org.seleniumhq.selenium:selenium-java:2.28.0') {
      exclude group: 'org.seleniumhq.selenium', module: 'selenium-chrome-driver'
  }
  
  h2		"com.h2database:${h2Version}"
			
  providedCompile 	'javax.servlet:servlet-api:2.5',
					'javax.servlet:jsp-api:2.0'  
                    
  providedRuntime "com.h2database:h2:${h2Version}"
  providedRuntime 'commons-dbcp:commons-dbcp:1.4'
					  
  testCompile(group: 'junit', name: 'junit', version: '4+')
}

changelogs {
    main {
      file = file('db/changelog.groovy')
    }
}
databases {
    myDatabase {
      url = 'jdbc:h2:tcp://localhost/conan;FILE_LOCK=NO'
      username = "$dbUser"
      password = "$dbPass"
    }
  }
  
defaultDatabase = databases.myDatabase
defaultChangeLogs = changelogs

h2 {
    tcpPort = 9092
    webPort = 8082

    conan {
        scripts = [
             'src/test/resources/create.sql',
             'src/test/resources/data.sql'
        ]
    }
}

task wrapper(type: Wrapper) {
	gradleVersion = 1.4
}

tasks.eclipse.dependsOn cleanEclipse

eclipse {
    classpath{
        plusConfigurations += configurations.providedCompile
        plusConfigurations += configurations.seleniumCompile
    }
}	  

task jettyDaemon(type: org.gradle.api.plugins.jetty.JettyRun) {
    doFirst {
        h2start.execute()
    }
    httpPort = 8383
    daemon = true
}

task selenium(type: Test, dependsOn: jettyDaemon) {
    testClassesDir = sourceSets.selenium.output.classesDir
    classpath = sourceSets.selenium.runtimeClasspath
}

/**
 * Configure jettyRun, jettyRunWar and jettyStop tasks.
 */
[jettyRun,jettyRunWar, jettyStop]*.stopPort = 19742
[jettyRun,jettyRunWar]*.httpPort = 8383
[jettyRun,jettyRunWar, jettyStop]*.stopKey = 'dummy'

jettyRun {
    jettyEnvXml file('src/test/resources/jetty-env.xml')
}

/**
 * Run the h2 server before jetty starts up
 */
[jettyRun, jettyRunWar]*.doFirst {
    h2start.execute()
    update.execute()
}

task integrationTest(type: Test, dependsOn: "test") << {
   include '**/IntegrationTest*.*'
}

integrationTest.doFirst {
	println 'Starting the embedded tomcat server'
	tasks.tomcatRun.daemon=true
	tasks.tomcatRun.execute()

}
integrationTest.doLast {
	println 'Stopping the embedded tomcat server'
	tasks.tomcatStop.execute()
}